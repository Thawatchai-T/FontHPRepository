/*
 * File: app/view/main/mainmarketing/window/GarantorWindowViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */
//add function 20150903
Ext.define('FrontHPApp.view.main.mainmarketing.window.GarantorWindowViewController', {
    extend: 'Ext.app.ViewController',
    //alias: 'controller.mainmainmarketingwindowgarantorwindow',
    alias: 'controller.garantorwindow',
    onSaveAddressClick: function(button, e, eOpts) {
       // Ext.widget("frmcusaddress").show();
    },

    onSaveAddressClick1: function(button, e, eOpts) {
        Ext.widget("mainmainmarketingwindowcommonpopuppopupcusaddress").show();
    },

    onSaveClick: function(button, e, eOpts) {
        var me = this.getView(),
         form = me.down('form').getForm();
        console.log("1");
        if (form.isValid()) {
            form.submit({
                clientValidation: true,
                url: 'api/Garantor/Insert',
                success: function (form, action) {
                    Ext.Msg.alert('Success', 'บันทึกข้อมูลเรียบร้อย');
                    me.down('grid').getStore().load();
                },
                failure: function (form, action) {
                    Ext.Msg.alert('Fail', 'ไม่สามารถบันทึกข้อมูลได้');
                }

            });
        } else {
            Ext.Msg.alert('Invalid Data', 'Please correct form errors.')
        }
    },
    onEditClick: function (button, e, eOpts) {
        console.log('E');
        var me = this.getView(),
            grid = me.down('gridpanel'),
            store = grid.getStore(),
            record = grid.getSelection();
        if (record.length > 0) {
            var form = this.getView().down('form').getForm();
            form.loadRecord(record[0]);
        }
    },
    onDeleteClick: function (button, e, eOpts) {
        var me = this.getView(),
            grid = me.down('gridpanel'),
            store = grid.getStore(),
            record = grid.getSelection(),
            count = record.length;

        if (count > 0) {

            Ext.MessageBox.confirm("Confirm", "คุณต้องการที่ลบใช่หรือไม่?", function (btn) {

                if (btn == 'yes') {

                    for (i = 0; i < count; i++) {
                        store.remove(record[i]);
                    }
                    store.sync();
                    Ext.MessageBox.alert("Status", 'ลบข้อมูลเรียบร้อย');
                }

            }, this);
        }//end if

    },
    onItemDblClick: function (dataview, record, item, index, e, eOpts) {
        //add event grid dbclick 20150904
        var form = this.getView().down('form').getForm();
       
        Ext.Ajax.request({
            url: 'api/Garantor/GetGarantorById',
            method: 'get',
            params: {
                id:record.get('id')
            },
          
           
            success: function (response) {
                var text = Ext.decode(response.responseText),
                    model = Ext.create('FrontHPApp.model.GarantorFormModel', text);
                form.loadRecord(model);

            }

        });
    },

    // [20150817] p2p  Add by even OccupationCatelogy 
    onOccupationCatelogyChange: function (field, newValue, oldValue, eOpts) {
    var me = this,
        refs = me.getReferences(),
        cboccupationcatelogy = refs.occupationcatelogy,
        cboccupationGroup = refs.occupationGroup,
        cboccupationcareer = refs.occupationcareer;
    cbposition = refs.position;

        // Clear selected series value
    if (oldValue != null) {
        cboccupationGroup.setValue(""),
        cboccupationcareer.setValue("");
        cbposition.setValue("");
    }
        
    var store = cboccupationGroup.getStore();
    store.getProxy().setExtraParam('occupationcatelogyid', newValue);
    store.load();

},

onOccupationGroupChange: function (field, newValue, oldValue, eOpts) {
    var me = this,
          refs = me.getReferences(),
          cboccupationcatelogy = refs.occupationcatelogy,
          cboccupationGroup = refs.occupationGroup,
          cboccupationcareer = refs.occupationcareer;
    cbposition = refs.position;

    // Clear selected series value
    if (oldValue != null) {
        cboccupationcareer.setValue("");
        cbposition.setValue("");
    }

    var store = cboccupationcareer.getStore();
    store.getProxy().setExtraParam('occupationgroupid', newValue);
    store.load();
},

onOccupationCareerChange: function (field, newValue, oldValue, eOpts) {
    var me = this,
          refs = me.getReferences(),
          cboccupationcatelogy = refs.occupationcatelogy,
          cboccupationGroup = refs.occupationGroup,
          cboccupationcareer = refs.occupationcareer;
    cbposition = refs.position;

    // Clear selected series value
    if (oldValue != null) {
        cbposition.setValue("");
    }

    var store = cbposition.getStore();
    store.getProxy().setExtraParam('occupationcareerid', newValue);
    store.load();
}

});
